/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DecreaseWithV3FlashswapMultihopConnectorInterface
  extends ethers.utils.Interface {
  functions: {
    "decreasePositionWithV3FlashswapMultihop((uint256,uint256,uint256,address,address,address,bytes))": FunctionFragment;
    "holder()": FunctionFragment;
    "principal()": FunctionFragment;
    "profit()": FunctionFragment;
    "uniswapV3FlashCallback(uint256,uint256,bytes)": FunctionFragment;
    "uniswapV3SwapCallback(int256,int256,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "decreasePositionWithV3FlashswapMultihop",
    values: [
      {
        withdrawAmount: BigNumberish;
        maxSupplyTokenRepayAmount: BigNumberish;
        borrowTokenRepayAmount: BigNumberish;
        platform: string;
        supplyToken: string;
        borrowToken: string;
        path: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "holder", values?: undefined): string;
  encodeFunctionData(functionFragment: "principal", values?: undefined): string;
  encodeFunctionData(functionFragment: "profit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "uniswapV3FlashCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3SwapCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "decreasePositionWithV3FlashswapMultihop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "holder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "principal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "profit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3FlashCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3SwapCallback",
    data: BytesLike
  ): Result;

  events: {
    "FundsWithdrawal(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FundsWithdrawal"): EventFragment;
}

export type FundsWithdrawalEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    withdrawAmount: BigNumber;
    principalFactor: BigNumber;
  }
>;

export class DecreaseWithV3FlashswapMultihopConnector extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DecreaseWithV3FlashswapMultihopConnectorInterface;

  functions: {
    decreasePositionWithV3FlashswapMultihop(
      params: {
        withdrawAmount: BigNumberish;
        maxSupplyTokenRepayAmount: BigNumberish;
        borrowTokenRepayAmount: BigNumberish;
        platform: string;
        supplyToken: string;
        borrowToken: string;
        path: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    holder(overrides?: CallOverrides): Promise<[string]>;

    principal(overrides?: CallOverrides): Promise<[BigNumber]>;

    profit(overrides?: CallOverrides): Promise<[BigNumber]>;

    uniswapV3FlashCallback(
      fee0: BigNumberish,
      fee1: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  decreasePositionWithV3FlashswapMultihop(
    params: {
      withdrawAmount: BigNumberish;
      maxSupplyTokenRepayAmount: BigNumberish;
      borrowTokenRepayAmount: BigNumberish;
      platform: string;
      supplyToken: string;
      borrowToken: string;
      path: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  holder(overrides?: CallOverrides): Promise<string>;

  principal(overrides?: CallOverrides): Promise<BigNumber>;

  profit(overrides?: CallOverrides): Promise<BigNumber>;

  uniswapV3FlashCallback(
    fee0: BigNumberish,
    fee1: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniswapV3SwapCallback(
    amount0Delta: BigNumberish,
    amount1Delta: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    decreasePositionWithV3FlashswapMultihop(
      params: {
        withdrawAmount: BigNumberish;
        maxSupplyTokenRepayAmount: BigNumberish;
        borrowTokenRepayAmount: BigNumberish;
        platform: string;
        supplyToken: string;
        borrowToken: string;
        path: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    holder(overrides?: CallOverrides): Promise<string>;

    principal(overrides?: CallOverrides): Promise<BigNumber>;

    profit(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV3FlashCallback(
      fee0: BigNumberish,
      fee1: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FundsWithdrawal(uint256,uint256)"(
      withdrawAmount?: null,
      principalFactor?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { withdrawAmount: BigNumber; principalFactor: BigNumber }
    >;

    FundsWithdrawal(
      withdrawAmount?: null,
      principalFactor?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { withdrawAmount: BigNumber; principalFactor: BigNumber }
    >;
  };

  estimateGas: {
    decreasePositionWithV3FlashswapMultihop(
      params: {
        withdrawAmount: BigNumberish;
        maxSupplyTokenRepayAmount: BigNumberish;
        borrowTokenRepayAmount: BigNumberish;
        platform: string;
        supplyToken: string;
        borrowToken: string;
        path: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    holder(overrides?: CallOverrides): Promise<BigNumber>;

    principal(overrides?: CallOverrides): Promise<BigNumber>;

    profit(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV3FlashCallback(
      fee0: BigNumberish,
      fee1: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    decreasePositionWithV3FlashswapMultihop(
      params: {
        withdrawAmount: BigNumberish;
        maxSupplyTokenRepayAmount: BigNumberish;
        borrowTokenRepayAmount: BigNumberish;
        platform: string;
        supplyToken: string;
        borrowToken: string;
        path: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    holder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    principal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    profit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapV3FlashCallback(
      fee0: BigNumberish,
      fee1: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
