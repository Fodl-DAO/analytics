/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AllConnectorsInterface extends ethers.utils.Interface {
  functions: {
    "claimRewards()": FunctionFragment;
    "configurePNL(uint256,uint256,uint256,uint256,bool)": FunctionFragment;
    "configureStopLoss(uint256,uint256,uint256)": FunctionFragment;
    "decreasePositionWithV3FlashswapMultihop((uint256,uint256,uint256,address,address,address,bytes))": FunctionFragment;
    "decreaseSimplePositionWithFunds(address,address,uint256,address,uint256)": FunctionFragment;
    "executePNL(uint256,bool)": FunctionFragment;
    "executeStopLoss()": FunctionFragment;
    "getAllPNLSettings()": FunctionFragment;
    "getBorrowBalance()": FunctionFragment;
    "getCollateralUsageFactor()": FunctionFragment;
    "getPNLSettingsAt(uint256)": FunctionFragment;
    "getPNLState()": FunctionFragment;
    "getPositionMetadata()": FunctionFragment;
    "getPositionValue()": FunctionFragment;
    "getPrincipalValue()": FunctionFragment;
    "getSimplePositionDetails()": FunctionFragment;
    "getStopLossConfiguration()": FunctionFragment;
    "getStopLossState()": FunctionFragment;
    "getSupplyBalance()": FunctionFragment;
    "increasePositionWithV3FlashswapMultihop((uint256,uint256,uint256,address,address,address,bytes))": FunctionFragment;
    "increaseSimplePositionWithFunds(address,address,uint256,address,uint256)": FunctionFragment;
    "removeAllPNLSettings()": FunctionFragment;
    "removePNLSetting(uint256)": FunctionFragment;
    "resetAccount(address,address,uint256)": FunctionFragment;
    "setTokenURI(string,uint8,bytes32,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claimRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "configurePNL",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "configureStopLoss",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePositionWithV3FlashswapMultihop",
    values: [
      {
        withdrawAmount: BigNumberish;
        maxSupplyTokenRepayAmount: BigNumberish;
        borrowTokenRepayAmount: BigNumberish;
        platform: string;
        supplyToken: string;
        borrowToken: string;
        path: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseSimplePositionWithFunds",
    values: [string, string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executePNL",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "executeStopLoss",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPNLSettings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralUsageFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPNLSettingsAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPNLState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionMetadata",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPrincipalValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSimplePositionDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStopLossConfiguration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStopLossState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSupplyBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increasePositionWithV3FlashswapMultihop",
    values: [
      {
        principalAmount: BigNumberish;
        supplyAmount: BigNumberish;
        maxBorrowAmount: BigNumberish;
        platform: string;
        supplyToken: string;
        borrowToken: string;
        path: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseSimplePositionWithFunds",
    values: [string, string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAllPNLSettings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removePNLSetting",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resetAccount",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenURI",
    values: [string, BigNumberish, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configurePNL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureStopLoss",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePositionWithV3FlashswapMultihop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseSimplePositionWithFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "executePNL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeStopLoss",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPNLSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralUsageFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPNLSettingsAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPNLState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrincipalValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSimplePositionDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStopLossConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStopLossState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupplyBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePositionWithV3FlashswapMultihop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseSimplePositionWithFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAllPNLSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePNLSetting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenURI",
    data: BytesLike
  ): Result;

  events: {
    "OwnerChanged(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnerChanged"): EventFragment;
}

export type OwnerChangedEvent = TypedEvent<
  [string, string] & { oldOwner: string; newOwner: string }
>;

export class AllConnectors extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AllConnectorsInterface;

  functions: {
    claimRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    configurePNL(
      priceTarget: BigNumberish,
      fixedReward: BigNumberish,
      percentageReward: BigNumberish,
      unwindFactor: BigNumberish,
      isTakeProfit: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    configureStopLoss(
      unwindFactor: BigNumberish,
      slippageIncentive: BigNumberish,
      collateralUsageLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreasePositionWithV3FlashswapMultihop(
      params: {
        withdrawAmount: BigNumberish;
        maxSupplyTokenRepayAmount: BigNumberish;
        borrowTokenRepayAmount: BigNumberish;
        platform: string;
        supplyToken: string;
        borrowToken: string;
        path: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreaseSimplePositionWithFunds(
      platform: string,
      redeemToken: string,
      redeemAmount: BigNumberish,
      repayToken: string,
      repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executePNL(
      index: BigNumberish,
      withApproval: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeStopLoss(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllPNLSettings(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBorrowBalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCollateralUsageFactor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPNLSettingsAt(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPNLState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPositionMetadata(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPositionValue(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPrincipalValue(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getSimplePositionDetails(
      overrides?: CallOverrides
    ): Promise<[string, string, string]>;

    getStopLossConfiguration(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        slippageIncentive: BigNumber;
        collateralUsageLimit: BigNumber;
        unwindFactor: BigNumber;
      }
    >;

    getStopLossState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getSupplyBalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increasePositionWithV3FlashswapMultihop(
      params: {
        principalAmount: BigNumberish;
        supplyAmount: BigNumberish;
        maxBorrowAmount: BigNumberish;
        platform: string;
        supplyToken: string;
        borrowToken: string;
        path: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseSimplePositionWithFunds(
      platform: string,
      supplyToken: string,
      supplyAmount: BigNumberish,
      borrowToken: string,
      borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeAllPNLSettings(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removePNLSetting(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resetAccount(
      oldOwner: string,
      newOwner: string,
      accountId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenURI(
      tokenURI: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claimRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  configurePNL(
    priceTarget: BigNumberish,
    fixedReward: BigNumberish,
    percentageReward: BigNumberish,
    unwindFactor: BigNumberish,
    isTakeProfit: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  configureStopLoss(
    unwindFactor: BigNumberish,
    slippageIncentive: BigNumberish,
    collateralUsageLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreasePositionWithV3FlashswapMultihop(
    params: {
      withdrawAmount: BigNumberish;
      maxSupplyTokenRepayAmount: BigNumberish;
      borrowTokenRepayAmount: BigNumberish;
      platform: string;
      supplyToken: string;
      borrowToken: string;
      path: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreaseSimplePositionWithFunds(
    platform: string,
    redeemToken: string,
    redeemAmount: BigNumberish,
    repayToken: string,
    repayAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executePNL(
    index: BigNumberish,
    withApproval: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeStopLoss(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllPNLSettings(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBorrowBalance(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCollateralUsageFactor(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPNLSettingsAt(
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPNLState(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPositionMetadata(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPositionValue(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPrincipalValue(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getSimplePositionDetails(
    overrides?: CallOverrides
  ): Promise<[string, string, string]>;

  getStopLossConfiguration(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      slippageIncentive: BigNumber;
      collateralUsageLimit: BigNumber;
      unwindFactor: BigNumber;
    }
  >;

  getStopLossState(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getSupplyBalance(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increasePositionWithV3FlashswapMultihop(
    params: {
      principalAmount: BigNumberish;
      supplyAmount: BigNumberish;
      maxBorrowAmount: BigNumberish;
      platform: string;
      supplyToken: string;
      borrowToken: string;
      path: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseSimplePositionWithFunds(
    platform: string,
    supplyToken: string,
    supplyAmount: BigNumberish,
    borrowToken: string,
    borrowAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeAllPNLSettings(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removePNLSetting(
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resetAccount(
    oldOwner: string,
    newOwner: string,
    accountId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenURI(
    tokenURI: string,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimRewards(overrides?: CallOverrides): Promise<[string, BigNumber]>;

    configurePNL(
      priceTarget: BigNumberish,
      fixedReward: BigNumberish,
      percentageReward: BigNumberish,
      unwindFactor: BigNumberish,
      isTakeProfit: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    configureStopLoss(
      unwindFactor: BigNumberish,
      slippageIncentive: BigNumberish,
      collateralUsageLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    decreasePositionWithV3FlashswapMultihop(
      params: {
        withdrawAmount: BigNumberish;
        maxSupplyTokenRepayAmount: BigNumberish;
        borrowTokenRepayAmount: BigNumberish;
        platform: string;
        supplyToken: string;
        borrowToken: string;
        path: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    decreaseSimplePositionWithFunds(
      platform: string,
      redeemToken: string,
      redeemAmount: BigNumberish,
      repayToken: string,
      repayAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    executePNL(
      index: BigNumberish,
      withApproval: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeStopLoss(overrides?: CallOverrides): Promise<BigNumber>;

    getAllPNLSettings(
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        priceTarget: BigNumber;
        fixedReward: BigNumber;
        percentageReward: BigNumber;
        unwindFactor: BigNumber;
        isTakeProfit: boolean;
      })[]
    >;

    getBorrowBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getCollateralUsageFactor(overrides?: CallOverrides): Promise<BigNumber>;

    getPNLSettingsAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        priceTarget: BigNumber;
        fixedReward: BigNumber;
        percentageReward: BigNumber;
        unwindFactor: BigNumber;
        isTakeProfit: boolean;
      }
    >;

    getPNLState(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        ([
          boolean,
          string,
          [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
            priceTarget: BigNumber;
            fixedReward: BigNumber;
            percentageReward: BigNumber;
            unwindFactor: BigNumber;
            isTakeProfit: boolean;
          }
        ] & {
          canBeTriggered: boolean;
          reason: string;
          settings: [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
            priceTarget: BigNumber;
            fixedReward: BigNumber;
            percentageReward: BigNumber;
            unwindFactor: BigNumber;
            isTakeProfit: boolean;
          };
        })[]
      ] & {
        priceOfBorrowToken: BigNumber;
        priceOfSupplyToken: BigNumber;
        supplyBalance: BigNumber;
        borrowBalance: BigNumber;
        platform: string;
        borrowToken: string;
        supplyToken: string;
        simulations: ([
          boolean,
          string,
          [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
            priceTarget: BigNumber;
            fixedReward: BigNumber;
            percentageReward: BigNumber;
            unwindFactor: BigNumber;
            isTakeProfit: boolean;
          }
        ] & {
          canBeTriggered: boolean;
          reason: string;
          settings: [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
            priceTarget: BigNumber;
            fixedReward: BigNumber;
            percentageReward: BigNumber;
            unwindFactor: BigNumber;
            isTakeProfit: boolean;
          };
        })[];
      }
    >;

    getPositionMetadata(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string
      ] & {
        supplyAmount: BigNumber;
        borrowAmount: BigNumber;
        collateralUsageFactor: BigNumber;
        principalValue: BigNumber;
        positionValue: BigNumber;
        positionAddress: string;
        platformAddress: string;
        supplyTokenAddress: string;
        borrowTokenAddress: string;
      }
    >;

    getPositionValue(overrides?: CallOverrides): Promise<BigNumber>;

    getPrincipalValue(overrides?: CallOverrides): Promise<BigNumber>;

    getSimplePositionDetails(
      overrides?: CallOverrides
    ): Promise<[string, string, string]>;

    getStopLossConfiguration(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        slippageIncentive: BigNumber;
        collateralUsageLimit: BigNumber;
        unwindFactor: BigNumber;
      }
    >;

    getStopLossState(
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        canTriggerStopLoss: boolean;
        supplyBalance: BigNumber;
        borrowBalance: BigNumber;
        slippageIncentive: BigNumber;
        collateralUsageLimit: BigNumber;
        unwindFactor: BigNumber;
      }
    >;

    getSupplyBalance(overrides?: CallOverrides): Promise<BigNumber>;

    increasePositionWithV3FlashswapMultihop(
      params: {
        principalAmount: BigNumberish;
        supplyAmount: BigNumberish;
        maxBorrowAmount: BigNumberish;
        platform: string;
        supplyToken: string;
        borrowToken: string;
        path: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    increaseSimplePositionWithFunds(
      platform: string,
      supplyToken: string,
      supplyAmount: BigNumberish,
      borrowToken: string,
      borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAllPNLSettings(overrides?: CallOverrides): Promise<void>;

    removePNLSetting(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    resetAccount(
      oldOwner: string,
      newOwner: string,
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenURI(
      tokenURI: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnerChanged(address,address)"(
      oldOwner?: null,
      newOwner?: null
    ): TypedEventFilter<
      [string, string],
      { oldOwner: string; newOwner: string }
    >;

    OwnerChanged(
      oldOwner?: null,
      newOwner?: null
    ): TypedEventFilter<
      [string, string],
      { oldOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    claimRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    configurePNL(
      priceTarget: BigNumberish,
      fixedReward: BigNumberish,
      percentageReward: BigNumberish,
      unwindFactor: BigNumberish,
      isTakeProfit: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    configureStopLoss(
      unwindFactor: BigNumberish,
      slippageIncentive: BigNumberish,
      collateralUsageLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreasePositionWithV3FlashswapMultihop(
      params: {
        withdrawAmount: BigNumberish;
        maxSupplyTokenRepayAmount: BigNumberish;
        borrowTokenRepayAmount: BigNumberish;
        platform: string;
        supplyToken: string;
        borrowToken: string;
        path: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreaseSimplePositionWithFunds(
      platform: string,
      redeemToken: string,
      redeemAmount: BigNumberish,
      repayToken: string,
      repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executePNL(
      index: BigNumberish,
      withApproval: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeStopLoss(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllPNLSettings(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBorrowBalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCollateralUsageFactor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPNLSettingsAt(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPNLState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPositionMetadata(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPositionValue(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPrincipalValue(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getSimplePositionDetails(overrides?: CallOverrides): Promise<BigNumber>;

    getStopLossConfiguration(overrides?: CallOverrides): Promise<BigNumber>;

    getStopLossState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getSupplyBalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increasePositionWithV3FlashswapMultihop(
      params: {
        principalAmount: BigNumberish;
        supplyAmount: BigNumberish;
        maxBorrowAmount: BigNumberish;
        platform: string;
        supplyToken: string;
        borrowToken: string;
        path: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseSimplePositionWithFunds(
      platform: string,
      supplyToken: string,
      supplyAmount: BigNumberish,
      borrowToken: string,
      borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeAllPNLSettings(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removePNLSetting(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resetAccount(
      oldOwner: string,
      newOwner: string,
      accountId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenURI(
      tokenURI: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    configurePNL(
      priceTarget: BigNumberish,
      fixedReward: BigNumberish,
      percentageReward: BigNumberish,
      unwindFactor: BigNumberish,
      isTakeProfit: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    configureStopLoss(
      unwindFactor: BigNumberish,
      slippageIncentive: BigNumberish,
      collateralUsageLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreasePositionWithV3FlashswapMultihop(
      params: {
        withdrawAmount: BigNumberish;
        maxSupplyTokenRepayAmount: BigNumberish;
        borrowTokenRepayAmount: BigNumberish;
        platform: string;
        supplyToken: string;
        borrowToken: string;
        path: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreaseSimplePositionWithFunds(
      platform: string,
      redeemToken: string,
      redeemAmount: BigNumberish,
      repayToken: string,
      repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executePNL(
      index: BigNumberish,
      withApproval: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeStopLoss(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllPNLSettings(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBorrowBalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCollateralUsageFactor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPNLSettingsAt(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPNLState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPositionMetadata(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPositionValue(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPrincipalValue(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getSimplePositionDetails(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStopLossConfiguration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStopLossState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getSupplyBalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increasePositionWithV3FlashswapMultihop(
      params: {
        principalAmount: BigNumberish;
        supplyAmount: BigNumberish;
        maxBorrowAmount: BigNumberish;
        platform: string;
        supplyToken: string;
        borrowToken: string;
        path: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseSimplePositionWithFunds(
      platform: string,
      supplyToken: string,
      supplyAmount: BigNumberish,
      borrowToken: string,
      borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeAllPNLSettings(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removePNLSetting(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resetAccount(
      oldOwner: string,
      newOwner: string,
      accountId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenURI(
      tokenURI: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
