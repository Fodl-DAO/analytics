/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AavePriceOracleMockInterface extends ethers.utils.Interface {
  functions: {
    "MANTISSA()": FunctionFragment;
    "getAssetPrice(address)": FunctionFragment;
    "getAssetsPrices(address[])": FunctionFragment;
    "getFallbackOracle()": FunctionFragment;
    "getPriceUpdate(address)": FunctionFragment;
    "getSourceOfAsset(address)": FunctionFragment;
    "originalOracle()": FunctionFragment;
    "setOriginalOracle(address)": FunctionFragment;
    "setPriceUpdate(address,uint256)": FunctionFragment;
    "tokenPrices(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "MANTISSA", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAssetPrice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetsPrices",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getFallbackOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceUpdate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSourceOfAsset",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "originalOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOriginalOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceUpdate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tokenPrices", values: [string]): string;

  decodeFunctionResult(functionFragment: "MANTISSA", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAssetPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetsPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFallbackOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSourceOfAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "originalOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOriginalOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenPrices",
    data: BytesLike
  ): Result;

  events: {};
}

export class AavePriceOracleMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AavePriceOracleMockInterface;

  functions: {
    MANTISSA(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAssetPrice(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAssetsPrices(
      _assets: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getFallbackOracle(overrides?: CallOverrides): Promise<[string]>;

    getPriceUpdate(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSourceOfAsset(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    originalOracle(overrides?: CallOverrides): Promise<[string]>;

    setOriginalOracle(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPriceUpdate(
      token: string,
      priceUpdate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenPrices(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  MANTISSA(overrides?: CallOverrides): Promise<BigNumber>;

  getAssetPrice(_asset: string, overrides?: CallOverrides): Promise<BigNumber>;

  getAssetsPrices(
    _assets: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getFallbackOracle(overrides?: CallOverrides): Promise<string>;

  getPriceUpdate(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  getSourceOfAsset(arg0: string, overrides?: CallOverrides): Promise<string>;

  originalOracle(overrides?: CallOverrides): Promise<string>;

  setOriginalOracle(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPriceUpdate(
    token: string,
    priceUpdate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenPrices(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    MANTISSA(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetPrice(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAssetsPrices(
      _assets: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getFallbackOracle(overrides?: CallOverrides): Promise<string>;

    getPriceUpdate(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSourceOfAsset(arg0: string, overrides?: CallOverrides): Promise<string>;

    originalOracle(overrides?: CallOverrides): Promise<string>;

    setOriginalOracle(addr: string, overrides?: CallOverrides): Promise<void>;

    setPriceUpdate(
      token: string,
      priceUpdate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenPrices(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    MANTISSA(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetPrice(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAssetsPrices(
      _assets: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFallbackOracle(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceUpdate(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSourceOfAsset(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    originalOracle(overrides?: CallOverrides): Promise<BigNumber>;

    setOriginalOracle(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPriceUpdate(
      token: string,
      priceUpdate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenPrices(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MANTISSA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAssetPrice(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssetsPrices(
      _assets: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFallbackOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPriceUpdate(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSourceOfAsset(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    originalOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setOriginalOracle(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPriceUpdate(
      token: string,
      priceUpdate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenPrices(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
