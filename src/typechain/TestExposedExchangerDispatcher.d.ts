/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TestExposedExchangerDispatcherInterface
  extends ethers.utils.Interface {
  functions: {
    "test_exchange(address,address,address,uint256,uint256,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "test_exchange",
    values: [string, string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "test_exchange",
    data: BytesLike
  ): Result;

  events: {
    "Exchange(address,address,uint256,uint256,bytes)": EventFragment;
    "SwapFromExact(address,address,uint256,uint256)": EventFragment;
    "SwapToExact(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Exchange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapFromExact"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapToExact"): EventFragment;
}

export type ExchangeEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string] & {
    fromToken: string;
    toToken: string;
    fromAmount: BigNumber;
    minToAmount: BigNumber;
    txData: string;
  }
>;

export type SwapFromExactEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    fromToken: string;
    toToken: string;
    fromAmount: BigNumber;
    minToAmount: BigNumber;
  }
>;

export type SwapToExactEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    fromToken: string;
    toToken: string;
    maxFromAmount: BigNumber;
    toAmount: BigNumber;
  }
>;

export class TestExposedExchangerDispatcher extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TestExposedExchangerDispatcherInterface;

  functions: {
    test_exchange(
      adapter: string,
      fromToken: string,
      toToken: string,
      fromAmount: BigNumberish,
      minToAmount: BigNumberish,
      txData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  test_exchange(
    adapter: string,
    fromToken: string,
    toToken: string,
    fromAmount: BigNumberish,
    minToAmount: BigNumberish,
    txData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    test_exchange(
      adapter: string,
      fromToken: string,
      toToken: string,
      fromAmount: BigNumberish,
      minToAmount: BigNumberish,
      txData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Exchange(address,address,uint256,uint256,bytes)"(
      fromToken?: null,
      toToken?: null,
      fromAmount?: null,
      minToAmount?: null,
      txData?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, string],
      {
        fromToken: string;
        toToken: string;
        fromAmount: BigNumber;
        minToAmount: BigNumber;
        txData: string;
      }
    >;

    Exchange(
      fromToken?: null,
      toToken?: null,
      fromAmount?: null,
      minToAmount?: null,
      txData?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, string],
      {
        fromToken: string;
        toToken: string;
        fromAmount: BigNumber;
        minToAmount: BigNumber;
        txData: string;
      }
    >;

    "SwapFromExact(address,address,uint256,uint256)"(
      fromToken?: null,
      toToken?: null,
      fromAmount?: null,
      minToAmount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        fromToken: string;
        toToken: string;
        fromAmount: BigNumber;
        minToAmount: BigNumber;
      }
    >;

    SwapFromExact(
      fromToken?: null,
      toToken?: null,
      fromAmount?: null,
      minToAmount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        fromToken: string;
        toToken: string;
        fromAmount: BigNumber;
        minToAmount: BigNumber;
      }
    >;

    "SwapToExact(address,address,uint256,uint256)"(
      fromToken?: null,
      toToken?: null,
      maxFromAmount?: null,
      toAmount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        fromToken: string;
        toToken: string;
        maxFromAmount: BigNumber;
        toAmount: BigNumber;
      }
    >;

    SwapToExact(
      fromToken?: null,
      toToken?: null,
      maxFromAmount?: null,
      toAmount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        fromToken: string;
        toToken: string;
        maxFromAmount: BigNumber;
        toAmount: BigNumber;
      }
    >;
  };

  estimateGas: {
    test_exchange(
      adapter: string,
      fromToken: string,
      toToken: string,
      fromAmount: BigNumberish,
      minToAmount: BigNumberish,
      txData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    test_exchange(
      adapter: string,
      fromToken: string,
      toToken: string,
      fromAmount: BigNumberish,
      minToAmount: BigNumberish,
      txData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
