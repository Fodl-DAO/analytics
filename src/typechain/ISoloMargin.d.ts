/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ISoloMarginInterface extends ethers.utils.Interface {
  functions: {
    "getAccountBalances((address,uint256))": FunctionFragment;
    "getAccountPar((address,uint256),uint256)": FunctionFragment;
    "getAccountStatus((address,uint256))": FunctionFragment;
    "getAccountValues((address,uint256))": FunctionFragment;
    "getAccountWei((address,uint256),uint256)": FunctionFragment;
    "getAdjustedAccountValues((address,uint256))": FunctionFragment;
    "getEarningsRate()": FunctionFragment;
    "getIsGlobalOperator(address)": FunctionFragment;
    "getIsLocalOperator(address,address)": FunctionFragment;
    "getLiquidationSpread()": FunctionFragment;
    "getLiquidationSpreadForPair(uint256,uint256)": FunctionFragment;
    "getMarginRatio()": FunctionFragment;
    "getMarket(uint256)": FunctionFragment;
    "getMarketCachedIndex(uint256)": FunctionFragment;
    "getMarketCurrentIndex(uint256)": FunctionFragment;
    "getMarketInterestRate(uint256)": FunctionFragment;
    "getMarketInterestSetter(uint256)": FunctionFragment;
    "getMarketIsClosing(uint256)": FunctionFragment;
    "getMarketMarginPremium(uint256)": FunctionFragment;
    "getMarketPrice(uint256)": FunctionFragment;
    "getMarketPriceOracle(uint256)": FunctionFragment;
    "getMarketSpreadPremium(uint256)": FunctionFragment;
    "getMarketTokenAddress(uint256)": FunctionFragment;
    "getMarketTotalPar(uint256)": FunctionFragment;
    "getMarketWithInfo(uint256)": FunctionFragment;
    "getMinBorrowedValue()": FunctionFragment;
    "getNumExcessTokens(uint256)": FunctionFragment;
    "getNumMarkets()": FunctionFragment;
    "getRiskLimits()": FunctionFragment;
    "getRiskParams()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "operate(tuple[],tuple[])": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerAddMarket(address,address,address,(uint256),(uint256))": FunctionFragment;
    "ownerSetEarningsRate((uint256))": FunctionFragment;
    "ownerSetGlobalOperator(address,bool)": FunctionFragment;
    "ownerSetInterestSetter(uint256,address)": FunctionFragment;
    "ownerSetIsClosing(uint256,bool)": FunctionFragment;
    "ownerSetLiquidationSpread((uint256))": FunctionFragment;
    "ownerSetMarginPremium(uint256,(uint256))": FunctionFragment;
    "ownerSetMarginRatio((uint256))": FunctionFragment;
    "ownerSetMinBorrowedValue((uint256))": FunctionFragment;
    "ownerSetPriceOracle(uint256,address)": FunctionFragment;
    "ownerSetSpreadPremium(uint256,(uint256))": FunctionFragment;
    "ownerWithdrawExcessTokens(uint256,address)": FunctionFragment;
    "ownerWithdrawUnsupportedTokens(address,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setOperators(tuple[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAccountBalances",
    values: [{ owner: string; number: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountPar",
    values: [{ owner: string; number: BigNumberish }, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountStatus",
    values: [{ owner: string; number: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountValues",
    values: [{ owner: string; number: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountWei",
    values: [{ owner: string; number: BigNumberish }, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdjustedAccountValues",
    values: [{ owner: string; number: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "getEarningsRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIsGlobalOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getIsLocalOperator",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationSpread",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationSpreadForPair",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarginRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketCachedIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketCurrentIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketInterestRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketInterestSetter",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketIsClosing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketMarginPremium",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketPriceOracle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketSpreadPremium",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketTokenAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketTotalPar",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketWithInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinBorrowedValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumExcessTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumMarkets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRiskLimits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRiskParams",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "operate",
    values: [
      { owner: string; number: BigNumberish }[],
      {
        actionType: BigNumberish;
        accountId: BigNumberish;
        amount: {
          sign: boolean;
          denomination: BigNumberish;
          ref: BigNumberish;
          value: BigNumberish;
        };
        primaryMarketId: BigNumberish;
        secondaryMarketId: BigNumberish;
        otherAddress: string;
        otherAccountId: BigNumberish;
        data: BytesLike;
      }[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerAddMarket",
    values: [
      string,
      string,
      string,
      { value: BigNumberish },
      { value: BigNumberish }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetEarningsRate",
    values: [{ value: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetGlobalOperator",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetInterestSetter",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetIsClosing",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetLiquidationSpread",
    values: [{ value: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetMarginPremium",
    values: [BigNumberish, { value: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetMarginRatio",
    values: [{ value: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetMinBorrowedValue",
    values: [{ value: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetPriceOracle",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetSpreadPremium",
    values: [BigNumberish, { value: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerWithdrawExcessTokens",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerWithdrawUnsupportedTokens",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOperators",
    values: [{ operator: string; trusted: boolean }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAccountBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountPar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdjustedAccountValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEarningsRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsGlobalOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsLocalOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationSpread",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationSpreadForPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarginRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMarket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMarketCachedIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketCurrentIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketInterestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketInterestSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketIsClosing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketMarginPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketSpreadPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketTotalPar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketWithInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinBorrowedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumExcessTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRiskLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRiskParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "operate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerAddMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetEarningsRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetGlobalOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetInterestSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetIsClosing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetLiquidationSpread",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetMarginPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetMarginRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetMinBorrowedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetSpreadPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerWithdrawExcessTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerWithdrawUnsupportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {};
}

export class ISoloMargin extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ISoloMarginInterface;

  functions: {
    getAccountBalances(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<
      [
        string[],
        ([boolean, BigNumber] & { sign: boolean; value: BigNumber })[],
        ([boolean, BigNumber] & { sign: boolean; value: BigNumber })[]
      ]
    >;

    getAccountPar(
      account: { owner: string; number: BigNumberish },
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[boolean, BigNumber] & { sign: boolean; value: BigNumber }]>;

    getAccountStatus(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[number]>;

    getAccountValues(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { value: BigNumber }, [BigNumber] & { value: BigNumber }]
    >;

    getAccountWei(
      account: { owner: string; number: BigNumberish },
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[boolean, BigNumber] & { sign: boolean; value: BigNumber }]>;

    getAdjustedAccountValues(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { value: BigNumber }, [BigNumber] & { value: BigNumber }]
    >;

    getEarningsRate(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { value: BigNumber }]>;

    getIsGlobalOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getIsLocalOperator(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getLiquidationSpread(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { value: BigNumber }]>;

    getLiquidationSpreadForPair(
      heldMarketId: BigNumberish,
      owedMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { value: BigNumber }]>;

    getMarginRatio(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { value: BigNumber }]>;

    getMarket(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          [BigNumber, BigNumber] & { borrow: BigNumber; supply: BigNumber },
          [BigNumber, BigNumber, number] & {
            borrow: BigNumber;
            supply: BigNumber;
            lastUpdate: number;
          },
          string,
          string,
          [BigNumber] & { value: BigNumber },
          [BigNumber] & { value: BigNumber },
          boolean
        ] & {
          token: string;
          totalPar: [BigNumber, BigNumber] & {
            borrow: BigNumber;
            supply: BigNumber;
          };
          index: [BigNumber, BigNumber, number] & {
            borrow: BigNumber;
            supply: BigNumber;
            lastUpdate: number;
          };
          priceOracle: string;
          interestSetter: string;
          marginPremium: [BigNumber] & { value: BigNumber };
          spreadPremium: [BigNumber] & { value: BigNumber };
          isClosing: boolean;
        }
      ]
    >;

    getMarketCachedIndex(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, number] & {
          borrow: BigNumber;
          supply: BigNumber;
          lastUpdate: number;
        }
      ]
    >;

    getMarketCurrentIndex(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, number] & {
          borrow: BigNumber;
          supply: BigNumber;
          lastUpdate: number;
        }
      ]
    >;

    getMarketInterestRate(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { value: BigNumber }]>;

    getMarketInterestSetter(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMarketIsClosing(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getMarketMarginPremium(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { value: BigNumber }]>;

    getMarketPrice(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMarketPriceOracle(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMarketSpreadPremium(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { value: BigNumber }]>;

    getMarketTokenAddress(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMarketTotalPar(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber, BigNumber] & { borrow: BigNumber; supply: BigNumber }]
    >;

    getMarketWithInfo(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          [BigNumber, BigNumber] & { borrow: BigNumber; supply: BigNumber },
          [BigNumber, BigNumber, number] & {
            borrow: BigNumber;
            supply: BigNumber;
            lastUpdate: number;
          },
          string,
          string,
          [BigNumber] & { value: BigNumber },
          [BigNumber] & { value: BigNumber },
          boolean
        ] & {
          token: string;
          totalPar: [BigNumber, BigNumber] & {
            borrow: BigNumber;
            supply: BigNumber;
          };
          index: [BigNumber, BigNumber, number] & {
            borrow: BigNumber;
            supply: BigNumber;
            lastUpdate: number;
          };
          priceOracle: string;
          interestSetter: string;
          marginPremium: [BigNumber] & { value: BigNumber };
          spreadPremium: [BigNumber] & { value: BigNumber };
          isClosing: boolean;
        },
        [BigNumber, BigNumber, number] & {
          borrow: BigNumber;
          supply: BigNumber;
          lastUpdate: number;
        },
        [BigNumber] & { value: BigNumber },
        [BigNumber] & { value: BigNumber }
      ]
    >;

    getMinBorrowedValue(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { value: BigNumber }]>;

    getNumExcessTokens(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[boolean, BigNumber] & { sign: boolean; value: BigNumber }]>;

    getNumMarkets(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRiskLimits(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          marginRatioMax: BigNumber;
          liquidationSpreadMax: BigNumber;
          earningsRateMax: BigNumber;
          marginPremiumMax: BigNumber;
          spreadPremiumMax: BigNumber;
          minBorrowedValueMax: BigNumber;
        }
      ]
    >;

    getRiskParams(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber] & { value: BigNumber },
          [BigNumber] & { value: BigNumber },
          [BigNumber] & { value: BigNumber },
          [BigNumber] & { value: BigNumber }
        ] & {
          marginRatio: [BigNumber] & { value: BigNumber };
          liquidationSpread: [BigNumber] & { value: BigNumber };
          earningsRate: [BigNumber] & { value: BigNumber };
          minBorrowedValue: [BigNumber] & { value: BigNumber };
        }
      ]
    >;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    operate(
      accounts: { owner: string; number: BigNumberish }[],
      actions: {
        actionType: BigNumberish;
        accountId: BigNumberish;
        amount: {
          sign: boolean;
          denomination: BigNumberish;
          ref: BigNumberish;
          value: BigNumberish;
        };
        primaryMarketId: BigNumberish;
        secondaryMarketId: BigNumberish;
        otherAddress: string;
        otherAccountId: BigNumberish;
        data: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerAddMarket(
      token: string,
      priceOracle: string,
      interestSetter: string,
      marginPremium: { value: BigNumberish },
      spreadPremium: { value: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ownerSetEarningsRate(
      earningsRate: { value: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ownerSetGlobalOperator(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ownerSetInterestSetter(
      marketId: BigNumberish,
      interestSetter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ownerSetIsClosing(
      marketId: BigNumberish,
      isClosing: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ownerSetLiquidationSpread(
      spread: { value: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ownerSetMarginPremium(
      marketId: BigNumberish,
      marginPremium: { value: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ownerSetMarginRatio(
      ratio: { value: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ownerSetMinBorrowedValue(
      minBorrowedValue: { value: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ownerSetPriceOracle(
      marketId: BigNumberish,
      priceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ownerSetSpreadPremium(
      marketId: BigNumberish,
      spreadPremium: { value: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ownerWithdrawExcessTokens(
      marketId: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ownerWithdrawUnsupportedTokens(
      token: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOperators(
      args: { operator: string; trusted: boolean }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getAccountBalances(
    account: { owner: string; number: BigNumberish },
    overrides?: CallOverrides
  ): Promise<
    [
      string[],
      ([boolean, BigNumber] & { sign: boolean; value: BigNumber })[],
      ([boolean, BigNumber] & { sign: boolean; value: BigNumber })[]
    ]
  >;

  getAccountPar(
    account: { owner: string; number: BigNumberish },
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { sign: boolean; value: BigNumber }>;

  getAccountStatus(
    account: { owner: string; number: BigNumberish },
    overrides?: CallOverrides
  ): Promise<number>;

  getAccountValues(
    account: { owner: string; number: BigNumberish },
    overrides?: CallOverrides
  ): Promise<
    [[BigNumber] & { value: BigNumber }, [BigNumber] & { value: BigNumber }]
  >;

  getAccountWei(
    account: { owner: string; number: BigNumberish },
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { sign: boolean; value: BigNumber }>;

  getAdjustedAccountValues(
    account: { owner: string; number: BigNumberish },
    overrides?: CallOverrides
  ): Promise<
    [[BigNumber] & { value: BigNumber }, [BigNumber] & { value: BigNumber }]
  >;

  getEarningsRate(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { value: BigNumber }>;

  getIsGlobalOperator(
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getIsLocalOperator(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getLiquidationSpread(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { value: BigNumber }>;

  getLiquidationSpreadForPair(
    heldMarketId: BigNumberish,
    owedMarketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { value: BigNumber }>;

  getMarginRatio(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { value: BigNumber }>;

  getMarket(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      [BigNumber, BigNumber] & { borrow: BigNumber; supply: BigNumber },
      [BigNumber, BigNumber, number] & {
        borrow: BigNumber;
        supply: BigNumber;
        lastUpdate: number;
      },
      string,
      string,
      [BigNumber] & { value: BigNumber },
      [BigNumber] & { value: BigNumber },
      boolean
    ] & {
      token: string;
      totalPar: [BigNumber, BigNumber] & {
        borrow: BigNumber;
        supply: BigNumber;
      };
      index: [BigNumber, BigNumber, number] & {
        borrow: BigNumber;
        supply: BigNumber;
        lastUpdate: number;
      };
      priceOracle: string;
      interestSetter: string;
      marginPremium: [BigNumber] & { value: BigNumber };
      spreadPremium: [BigNumber] & { value: BigNumber };
      isClosing: boolean;
    }
  >;

  getMarketCachedIndex(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number] & {
      borrow: BigNumber;
      supply: BigNumber;
      lastUpdate: number;
    }
  >;

  getMarketCurrentIndex(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number] & {
      borrow: BigNumber;
      supply: BigNumber;
      lastUpdate: number;
    }
  >;

  getMarketInterestRate(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { value: BigNumber }>;

  getMarketInterestSetter(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getMarketIsClosing(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getMarketMarginPremium(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { value: BigNumber }>;

  getMarketPrice(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getMarketPriceOracle(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getMarketSpreadPremium(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { value: BigNumber }>;

  getMarketTokenAddress(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getMarketTotalPar(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { borrow: BigNumber; supply: BigNumber }>;

  getMarketWithInfo(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [
        string,
        [BigNumber, BigNumber] & { borrow: BigNumber; supply: BigNumber },
        [BigNumber, BigNumber, number] & {
          borrow: BigNumber;
          supply: BigNumber;
          lastUpdate: number;
        },
        string,
        string,
        [BigNumber] & { value: BigNumber },
        [BigNumber] & { value: BigNumber },
        boolean
      ] & {
        token: string;
        totalPar: [BigNumber, BigNumber] & {
          borrow: BigNumber;
          supply: BigNumber;
        };
        index: [BigNumber, BigNumber, number] & {
          borrow: BigNumber;
          supply: BigNumber;
          lastUpdate: number;
        };
        priceOracle: string;
        interestSetter: string;
        marginPremium: [BigNumber] & { value: BigNumber };
        spreadPremium: [BigNumber] & { value: BigNumber };
        isClosing: boolean;
      },
      [BigNumber, BigNumber, number] & {
        borrow: BigNumber;
        supply: BigNumber;
        lastUpdate: number;
      },
      [BigNumber] & { value: BigNumber },
      [BigNumber] & { value: BigNumber }
    ]
  >;

  getMinBorrowedValue(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { value: BigNumber }>;

  getNumExcessTokens(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { sign: boolean; value: BigNumber }>;

  getNumMarkets(overrides?: CallOverrides): Promise<BigNumber>;

  getRiskLimits(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      marginRatioMax: BigNumber;
      liquidationSpreadMax: BigNumber;
      earningsRateMax: BigNumber;
      marginPremiumMax: BigNumber;
      spreadPremiumMax: BigNumber;
      minBorrowedValueMax: BigNumber;
    }
  >;

  getRiskParams(
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber] & { value: BigNumber },
      [BigNumber] & { value: BigNumber },
      [BigNumber] & { value: BigNumber },
      [BigNumber] & { value: BigNumber }
    ] & {
      marginRatio: [BigNumber] & { value: BigNumber };
      liquidationSpread: [BigNumber] & { value: BigNumber };
      earningsRate: [BigNumber] & { value: BigNumber };
      minBorrowedValue: [BigNumber] & { value: BigNumber };
    }
  >;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  operate(
    accounts: { owner: string; number: BigNumberish }[],
    actions: {
      actionType: BigNumberish;
      accountId: BigNumberish;
      amount: {
        sign: boolean;
        denomination: BigNumberish;
        ref: BigNumberish;
        value: BigNumberish;
      };
      primaryMarketId: BigNumberish;
      secondaryMarketId: BigNumberish;
      otherAddress: string;
      otherAccountId: BigNumberish;
      data: BytesLike;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerAddMarket(
    token: string,
    priceOracle: string,
    interestSetter: string,
    marginPremium: { value: BigNumberish },
    spreadPremium: { value: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ownerSetEarningsRate(
    earningsRate: { value: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ownerSetGlobalOperator(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ownerSetInterestSetter(
    marketId: BigNumberish,
    interestSetter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ownerSetIsClosing(
    marketId: BigNumberish,
    isClosing: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ownerSetLiquidationSpread(
    spread: { value: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ownerSetMarginPremium(
    marketId: BigNumberish,
    marginPremium: { value: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ownerSetMarginRatio(
    ratio: { value: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ownerSetMinBorrowedValue(
    minBorrowedValue: { value: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ownerSetPriceOracle(
    marketId: BigNumberish,
    priceOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ownerSetSpreadPremium(
    marketId: BigNumberish,
    spreadPremium: { value: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ownerWithdrawExcessTokens(
    marketId: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ownerWithdrawUnsupportedTokens(
    token: string,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOperators(
    args: { operator: string; trusted: boolean }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getAccountBalances(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<
      [
        string[],
        ([boolean, BigNumber] & { sign: boolean; value: BigNumber })[],
        ([boolean, BigNumber] & { sign: boolean; value: BigNumber })[]
      ]
    >;

    getAccountPar(
      account: { owner: string; number: BigNumberish },
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { sign: boolean; value: BigNumber }>;

    getAccountStatus(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<number>;

    getAccountValues(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { value: BigNumber }, [BigNumber] & { value: BigNumber }]
    >;

    getAccountWei(
      account: { owner: string; number: BigNumberish },
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { sign: boolean; value: BigNumber }>;

    getAdjustedAccountValues(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { value: BigNumber }, [BigNumber] & { value: BigNumber }]
    >;

    getEarningsRate(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    getIsGlobalOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getIsLocalOperator(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getLiquidationSpread(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    getLiquidationSpreadForPair(
      heldMarketId: BigNumberish,
      owedMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    getMarginRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    getMarket(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        [BigNumber, BigNumber] & { borrow: BigNumber; supply: BigNumber },
        [BigNumber, BigNumber, number] & {
          borrow: BigNumber;
          supply: BigNumber;
          lastUpdate: number;
        },
        string,
        string,
        [BigNumber] & { value: BigNumber },
        [BigNumber] & { value: BigNumber },
        boolean
      ] & {
        token: string;
        totalPar: [BigNumber, BigNumber] & {
          borrow: BigNumber;
          supply: BigNumber;
        };
        index: [BigNumber, BigNumber, number] & {
          borrow: BigNumber;
          supply: BigNumber;
          lastUpdate: number;
        };
        priceOracle: string;
        interestSetter: string;
        marginPremium: [BigNumber] & { value: BigNumber };
        spreadPremium: [BigNumber] & { value: BigNumber };
        isClosing: boolean;
      }
    >;

    getMarketCachedIndex(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        borrow: BigNumber;
        supply: BigNumber;
        lastUpdate: number;
      }
    >;

    getMarketCurrentIndex(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        borrow: BigNumber;
        supply: BigNumber;
        lastUpdate: number;
      }
    >;

    getMarketInterestRate(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    getMarketInterestSetter(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getMarketIsClosing(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getMarketMarginPremium(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    getMarketPrice(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getMarketPriceOracle(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getMarketSpreadPremium(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    getMarketTokenAddress(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getMarketTotalPar(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { borrow: BigNumber; supply: BigNumber }
    >;

    getMarketWithInfo(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          [BigNumber, BigNumber] & { borrow: BigNumber; supply: BigNumber },
          [BigNumber, BigNumber, number] & {
            borrow: BigNumber;
            supply: BigNumber;
            lastUpdate: number;
          },
          string,
          string,
          [BigNumber] & { value: BigNumber },
          [BigNumber] & { value: BigNumber },
          boolean
        ] & {
          token: string;
          totalPar: [BigNumber, BigNumber] & {
            borrow: BigNumber;
            supply: BigNumber;
          };
          index: [BigNumber, BigNumber, number] & {
            borrow: BigNumber;
            supply: BigNumber;
            lastUpdate: number;
          };
          priceOracle: string;
          interestSetter: string;
          marginPremium: [BigNumber] & { value: BigNumber };
          spreadPremium: [BigNumber] & { value: BigNumber };
          isClosing: boolean;
        },
        [BigNumber, BigNumber, number] & {
          borrow: BigNumber;
          supply: BigNumber;
          lastUpdate: number;
        },
        [BigNumber] & { value: BigNumber },
        [BigNumber] & { value: BigNumber }
      ]
    >;

    getMinBorrowedValue(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    getNumExcessTokens(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { sign: boolean; value: BigNumber }>;

    getNumMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    getRiskLimits(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        marginRatioMax: BigNumber;
        liquidationSpreadMax: BigNumber;
        earningsRateMax: BigNumber;
        marginPremiumMax: BigNumber;
        spreadPremiumMax: BigNumber;
        minBorrowedValueMax: BigNumber;
      }
    >;

    getRiskParams(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { value: BigNumber },
        [BigNumber] & { value: BigNumber },
        [BigNumber] & { value: BigNumber },
        [BigNumber] & { value: BigNumber }
      ] & {
        marginRatio: [BigNumber] & { value: BigNumber };
        liquidationSpread: [BigNumber] & { value: BigNumber };
        earningsRate: [BigNumber] & { value: BigNumber };
        minBorrowedValue: [BigNumber] & { value: BigNumber };
      }
    >;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    operate(
      accounts: { owner: string; number: BigNumberish }[],
      actions: {
        actionType: BigNumberish;
        accountId: BigNumberish;
        amount: {
          sign: boolean;
          denomination: BigNumberish;
          ref: BigNumberish;
          value: BigNumberish;
        };
        primaryMarketId: BigNumberish;
        secondaryMarketId: BigNumberish;
        otherAddress: string;
        otherAccountId: BigNumberish;
        data: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerAddMarket(
      token: string,
      priceOracle: string,
      interestSetter: string,
      marginPremium: { value: BigNumberish },
      spreadPremium: { value: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetEarningsRate(
      earningsRate: { value: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetGlobalOperator(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetInterestSetter(
      marketId: BigNumberish,
      interestSetter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetIsClosing(
      marketId: BigNumberish,
      isClosing: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetLiquidationSpread(
      spread: { value: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetMarginPremium(
      marketId: BigNumberish,
      marginPremium: { value: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetMarginRatio(
      ratio: { value: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetMinBorrowedValue(
      minBorrowedValue: { value: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetPriceOracle(
      marketId: BigNumberish,
      priceOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetSpreadPremium(
      marketId: BigNumberish,
      spreadPremium: { value: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    ownerWithdrawExcessTokens(
      marketId: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerWithdrawUnsupportedTokens(
      token: string,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setOperators(
      args: { operator: string; trusted: boolean }[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getAccountBalances(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountPar(
      account: { owner: string; number: BigNumberish },
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountStatus(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountValues(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountWei(
      account: { owner: string; number: BigNumberish },
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAdjustedAccountValues(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEarningsRate(overrides?: CallOverrides): Promise<BigNumber>;

    getIsGlobalOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIsLocalOperator(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidationSpread(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidationSpreadForPair(
      heldMarketId: BigNumberish,
      owedMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarginRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getMarket(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketCachedIndex(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketCurrentIndex(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketInterestRate(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketInterestSetter(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketIsClosing(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketMarginPremium(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketPrice(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketPriceOracle(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketSpreadPremium(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketTokenAddress(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketTotalPar(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketWithInfo(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinBorrowedValue(overrides?: CallOverrides): Promise<BigNumber>;

    getNumExcessTokens(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    getRiskLimits(overrides?: CallOverrides): Promise<BigNumber>;

    getRiskParams(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    operate(
      accounts: { owner: string; number: BigNumberish }[],
      actions: {
        actionType: BigNumberish;
        accountId: BigNumberish;
        amount: {
          sign: boolean;
          denomination: BigNumberish;
          ref: BigNumberish;
          value: BigNumberish;
        };
        primaryMarketId: BigNumberish;
        secondaryMarketId: BigNumberish;
        otherAddress: string;
        otherAccountId: BigNumberish;
        data: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerAddMarket(
      token: string,
      priceOracle: string,
      interestSetter: string,
      marginPremium: { value: BigNumberish },
      spreadPremium: { value: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ownerSetEarningsRate(
      earningsRate: { value: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ownerSetGlobalOperator(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ownerSetInterestSetter(
      marketId: BigNumberish,
      interestSetter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ownerSetIsClosing(
      marketId: BigNumberish,
      isClosing: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ownerSetLiquidationSpread(
      spread: { value: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ownerSetMarginPremium(
      marketId: BigNumberish,
      marginPremium: { value: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ownerSetMarginRatio(
      ratio: { value: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ownerSetMinBorrowedValue(
      minBorrowedValue: { value: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ownerSetPriceOracle(
      marketId: BigNumberish,
      priceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ownerSetSpreadPremium(
      marketId: BigNumberish,
      spreadPremium: { value: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ownerWithdrawExcessTokens(
      marketId: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ownerWithdrawUnsupportedTokens(
      token: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOperators(
      args: { operator: string; trusted: boolean }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAccountBalances(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountPar(
      account: { owner: string; number: BigNumberish },
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountStatus(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountValues(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountWei(
      account: { owner: string; number: BigNumberish },
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAdjustedAccountValues(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEarningsRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIsGlobalOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIsLocalOperator(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidationSpread(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidationSpreadForPair(
      heldMarketId: BigNumberish,
      owedMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarginRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMarket(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketCachedIndex(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketCurrentIndex(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketInterestRate(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketInterestSetter(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketIsClosing(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketMarginPremium(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketPrice(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketPriceOracle(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketSpreadPremium(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketTokenAddress(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketTotalPar(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketWithInfo(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinBorrowedValue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumExcessTokens(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumMarkets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRiskLimits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRiskParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operate(
      accounts: { owner: string; number: BigNumberish }[],
      actions: {
        actionType: BigNumberish;
        accountId: BigNumberish;
        amount: {
          sign: boolean;
          denomination: BigNumberish;
          ref: BigNumberish;
          value: BigNumberish;
        };
        primaryMarketId: BigNumberish;
        secondaryMarketId: BigNumberish;
        otherAddress: string;
        otherAccountId: BigNumberish;
        data: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerAddMarket(
      token: string,
      priceOracle: string,
      interestSetter: string,
      marginPremium: { value: BigNumberish },
      spreadPremium: { value: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ownerSetEarningsRate(
      earningsRate: { value: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ownerSetGlobalOperator(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ownerSetInterestSetter(
      marketId: BigNumberish,
      interestSetter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ownerSetIsClosing(
      marketId: BigNumberish,
      isClosing: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ownerSetLiquidationSpread(
      spread: { value: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ownerSetMarginPremium(
      marketId: BigNumberish,
      marginPremium: { value: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ownerSetMarginRatio(
      ratio: { value: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ownerSetMinBorrowedValue(
      minBorrowedValue: { value: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ownerSetPriceOracle(
      marketId: BigNumberish,
      priceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ownerSetSpreadPremium(
      marketId: BigNumberish,
      spreadPremium: { value: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ownerWithdrawExcessTokens(
      marketId: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ownerWithdrawUnsupportedTokens(
      token: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOperators(
      args: { operator: string; trusted: boolean }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
