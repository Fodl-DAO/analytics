/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PNLConnectorInterface extends ethers.utils.Interface {
  functions: {
    "configurePNL(uint256,uint256,uint256,uint256,bool)": FunctionFragment;
    "executePNL(uint256,bool)": FunctionFragment;
    "getAllPNLSettings()": FunctionFragment;
    "getPNLSettingsAt(uint256)": FunctionFragment;
    "getPNLState()": FunctionFragment;
    "removeAllPNLSettings()": FunctionFragment;
    "removePNLSetting(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "configurePNL",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "executePNL",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPNLSettings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPNLSettingsAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPNLState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeAllPNLSettings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removePNLSetting",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "configurePNL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "executePNL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllPNLSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPNLSettingsAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPNLState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAllPNLSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePNLSetting",
    data: BytesLike
  ): Result;

  events: {};
}

export class PNLConnector extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PNLConnectorInterface;

  functions: {
    configurePNL(
      priceTarget: BigNumberish,
      fixedReward: BigNumberish,
      percentageReward: BigNumberish,
      unwindFactor: BigNumberish,
      isTakeProfit: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executePNL(
      index: BigNumberish,
      withApproval: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllPNLSettings(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPNLSettingsAt(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPNLState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeAllPNLSettings(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removePNLSetting(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  configurePNL(
    priceTarget: BigNumberish,
    fixedReward: BigNumberish,
    percentageReward: BigNumberish,
    unwindFactor: BigNumberish,
    isTakeProfit: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executePNL(
    index: BigNumberish,
    withApproval: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllPNLSettings(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPNLSettingsAt(
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPNLState(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeAllPNLSettings(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removePNLSetting(
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    configurePNL(
      priceTarget: BigNumberish,
      fixedReward: BigNumberish,
      percentageReward: BigNumberish,
      unwindFactor: BigNumberish,
      isTakeProfit: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    executePNL(
      index: BigNumberish,
      withApproval: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllPNLSettings(
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        priceTarget: BigNumber;
        fixedReward: BigNumber;
        percentageReward: BigNumber;
        unwindFactor: BigNumber;
        isTakeProfit: boolean;
      })[]
    >;

    getPNLSettingsAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        priceTarget: BigNumber;
        fixedReward: BigNumber;
        percentageReward: BigNumber;
        unwindFactor: BigNumber;
        isTakeProfit: boolean;
      }
    >;

    getPNLState(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        ([
          boolean,
          string,
          [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
            priceTarget: BigNumber;
            fixedReward: BigNumber;
            percentageReward: BigNumber;
            unwindFactor: BigNumber;
            isTakeProfit: boolean;
          }
        ] & {
          canBeTriggered: boolean;
          reason: string;
          settings: [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
            priceTarget: BigNumber;
            fixedReward: BigNumber;
            percentageReward: BigNumber;
            unwindFactor: BigNumber;
            isTakeProfit: boolean;
          };
        })[]
      ] & {
        priceOfBorrowToken: BigNumber;
        priceOfSupplyToken: BigNumber;
        supplyBalance: BigNumber;
        borrowBalance: BigNumber;
        platform: string;
        borrowToken: string;
        supplyToken: string;
        simulations: ([
          boolean,
          string,
          [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
            priceTarget: BigNumber;
            fixedReward: BigNumber;
            percentageReward: BigNumber;
            unwindFactor: BigNumber;
            isTakeProfit: boolean;
          }
        ] & {
          canBeTriggered: boolean;
          reason: string;
          settings: [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
            priceTarget: BigNumber;
            fixedReward: BigNumber;
            percentageReward: BigNumber;
            unwindFactor: BigNumber;
            isTakeProfit: boolean;
          };
        })[];
      }
    >;

    removeAllPNLSettings(overrides?: CallOverrides): Promise<void>;

    removePNLSetting(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    configurePNL(
      priceTarget: BigNumberish,
      fixedReward: BigNumberish,
      percentageReward: BigNumberish,
      unwindFactor: BigNumberish,
      isTakeProfit: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executePNL(
      index: BigNumberish,
      withApproval: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllPNLSettings(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPNLSettingsAt(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPNLState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeAllPNLSettings(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removePNLSetting(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    configurePNL(
      priceTarget: BigNumberish,
      fixedReward: BigNumberish,
      percentageReward: BigNumberish,
      unwindFactor: BigNumberish,
      isTakeProfit: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executePNL(
      index: BigNumberish,
      withApproval: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllPNLSettings(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPNLSettingsAt(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPNLState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeAllPNLSettings(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removePNLSetting(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
