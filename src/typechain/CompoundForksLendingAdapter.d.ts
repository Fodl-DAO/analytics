/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface CompoundForksLendingAdapterInterface extends ethers.utils.Interface {
  functions: {
    "WETH()": FunctionFragment;
    "borrow(address,address,uint256)": FunctionFragment;
    "cTokenProvider()": FunctionFragment;
    "claimRewards(address)": FunctionFragment;
    "enterMarkets(address,address[])": FunctionFragment;
    "getAssetMetadata(address,address)": FunctionFragment;
    "getBorrowBalance(address,address)": FunctionFragment;
    "getCollateralFactorForAsset(address,address)": FunctionFragment;
    "getCollateralUsageFactor(address)": FunctionFragment;
    "getReferencePrice(address,address)": FunctionFragment;
    "getSupplyBalance(address,address)": FunctionFragment;
    "redeemSupply(address,address,uint256)": FunctionFragment;
    "repayBorrow(address,address,uint256)": FunctionFragment;
    "supply(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cTokenProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "enterMarkets",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetMetadata",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowBalance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralFactorForAsset",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralUsageFactor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferencePrice",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupplyBalance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemSupply",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayBorrow",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supply",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cTokenProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralFactorForAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralUsageFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferencePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupplyBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "supply", data: BytesLike): Result;

  events: {};
}

export class CompoundForksLendingAdapter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CompoundForksLendingAdapterInterface;

  functions: {
    WETH(overrides?: CallOverrides): Promise<[string]>;

    borrow(
      platform: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cTokenProvider(overrides?: CallOverrides): Promise<[string]>;

    claimRewards(
      platform: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enterMarkets(
      platform: string,
      markets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAssetMetadata(
      platform: string,
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBorrowBalance(
      platform: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCollateralFactorForAsset(
      platform: string,
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCollateralUsageFactor(
      platform: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getReferencePrice(
      platform: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getSupplyBalance(
      platform: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemSupply(
      platform: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repayBorrow(
      platform: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supply(
      platform: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  WETH(overrides?: CallOverrides): Promise<string>;

  borrow(
    platform: string,
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cTokenProvider(overrides?: CallOverrides): Promise<string>;

  claimRewards(
    platform: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enterMarkets(
    platform: string,
    markets: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAssetMetadata(
    platform: string,
    asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBorrowBalance(
    platform: string,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCollateralFactorForAsset(
    platform: string,
    asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCollateralUsageFactor(
    platform: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getReferencePrice(
    platform: string,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getSupplyBalance(
    platform: string,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemSupply(
    platform: string,
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repayBorrow(
    platform: string,
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supply(
    platform: string,
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    WETH(overrides?: CallOverrides): Promise<string>;

    borrow(
      platform: string,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cTokenProvider(overrides?: CallOverrides): Promise<string>;

    claimRewards(
      platform: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { rewardsToken: string; rewardsAmount: BigNumber }
    >;

    enterMarkets(
      platform: string,
      markets: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    getAssetMetadata(
      platform: string,
      asset: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean
      ] & {
        assetAddress: string;
        assetSymbol: string;
        assetDecimals: number;
        referencePrice: BigNumber;
        totalLiquidity: BigNumber;
        totalSupply: BigNumber;
        totalBorrow: BigNumber;
        totalReserves: BigNumber;
        supplyAPR: BigNumber;
        borrowAPR: BigNumber;
        rewardTokenAddress: string;
        rewardTokenSymbol: string;
        rewardTokenDecimals: number;
        estimatedSupplyRewardsPerYear: BigNumber;
        estimatedBorrowRewardsPerYear: BigNumber;
        collateralFactor: BigNumber;
        liquidationFactor: BigNumber;
        canSupply: boolean;
        canBorrow: boolean;
      }
    >;

    getBorrowBalance(
      platform: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralFactorForAsset(
      platform: string,
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralUsageFactor(
      platform: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReferencePrice(
      platform: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSupplyBalance(
      platform: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemSupply(
      platform: string,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    repayBorrow(
      platform: string,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supply(
      platform: string,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      platform: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cTokenProvider(overrides?: CallOverrides): Promise<BigNumber>;

    claimRewards(
      platform: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enterMarkets(
      platform: string,
      markets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAssetMetadata(
      platform: string,
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBorrowBalance(
      platform: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCollateralFactorForAsset(
      platform: string,
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCollateralUsageFactor(
      platform: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getReferencePrice(
      platform: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getSupplyBalance(
      platform: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemSupply(
      platform: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repayBorrow(
      platform: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supply(
      platform: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrow(
      platform: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cTokenProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimRewards(
      platform: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enterMarkets(
      platform: string,
      markets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAssetMetadata(
      platform: string,
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBorrowBalance(
      platform: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCollateralFactorForAsset(
      platform: string,
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCollateralUsageFactor(
      platform: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getReferencePrice(
      platform: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getSupplyBalance(
      platform: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemSupply(
      platform: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repayBorrow(
      platform: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supply(
      platform: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
