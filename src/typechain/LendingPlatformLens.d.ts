/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LendingPlatformLensInterface extends ethers.utils.Interface {
  functions: {
    "foldingRegistry()": FunctionFragment;
    "getAssetMetadata(address[],address[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "foldingRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetMetadata",
    values: [string[], string[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "foldingRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetMetadata",
    data: BytesLike
  ): Result;

  events: {};
}

export class LendingPlatformLens extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LendingPlatformLensInterface;

  functions: {
    foldingRegistry(overrides?: CallOverrides): Promise<[string]>;

    getAssetMetadata(
      platforms: string[],
      assets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  foldingRegistry(overrides?: CallOverrides): Promise<string>;

  getAssetMetadata(
    platforms: string[],
    assets: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    foldingRegistry(overrides?: CallOverrides): Promise<string>;

    getAssetMetadata(
      platforms: string[],
      assets: string[],
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean
      ] & {
        assetAddress: string;
        assetSymbol: string;
        assetDecimals: number;
        referencePrice: BigNumber;
        totalLiquidity: BigNumber;
        totalSupply: BigNumber;
        totalBorrow: BigNumber;
        totalReserves: BigNumber;
        supplyAPR: BigNumber;
        borrowAPR: BigNumber;
        rewardTokenAddress: string;
        rewardTokenSymbol: string;
        rewardTokenDecimals: number;
        estimatedSupplyRewardsPerYear: BigNumber;
        estimatedBorrowRewardsPerYear: BigNumber;
        collateralFactor: BigNumber;
        liquidationFactor: BigNumber;
        canSupply: boolean;
        canBorrow: boolean;
      })[]
    >;
  };

  filters: {};

  estimateGas: {
    foldingRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetMetadata(
      platforms: string[],
      assets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    foldingRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAssetMetadata(
      platforms: string[],
      assets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
