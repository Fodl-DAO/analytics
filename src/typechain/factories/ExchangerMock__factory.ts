/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ExchangerMock, ExchangerMockInterface } from "../ExchangerMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_outputToAmount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "fromToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "toToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fromAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "minToAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "txData",
        type: "bytes",
      },
    ],
    name: "Exchange",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "fromToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "toToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fromAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "minToAmount",
        type: "uint256",
      },
    ],
    name: "SwapFromExact",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "fromToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "toToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "maxFromAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "toAmount",
        type: "uint256",
      },
    ],
    name: "SwapToExact",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "fromToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "toToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "fromAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minToAmount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "txData",
        type: "bytes",
      },
    ],
    name: "exchange",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "getAmountIn",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "getAmountOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "fromToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "toToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "fromAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minToAmount",
        type: "uint256",
      },
    ],
    name: "swapFromExact",
    outputs: [
      {
        internalType: "uint256",
        name: "toAmount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "fromToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "toToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "maxFromAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "toAmount",
        type: "uint256",
      },
    ],
    name: "swapToExact",
    outputs: [
      {
        internalType: "uint256",
        name: "fromAmount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161070a38038061070a8339818101604052602081101561003357600080fd5b810190808051906020019092919050505080608081815250505060805161068f61007b6000398061039f52806103cb5280610472528061051a528061062f525061068f6000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80634aa066521461005c57806353b609b5146100de578063705e12e814610160578063ba5cdd3b146101ec578063d9e3be1c14610278575b600080fd5b6100c86004803603606081101561007257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061039b565b6040518082815260200191505060405180910390f35b61014a600480360360608110156100f457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506103c7565b6040518082815260200191505060405180910390f35b6101d66004803603608081101561017657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291905050506103f3565b6040518082815260200191505060405180910390f35b6102626004803603608081101561020257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919050505061049b565b6040518082815260200191505060405180910390f35b610385600480360360a081101561028e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001906401000000008111156102ff57600080fd5b82018360208201111561031157600080fd5b8035906020019184600183028401116401000000008311171561033357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610543565b6040518082815260200191505060405180910390f35b60007f000000000000000000000000000000000000000000000000000000000000000090509392505050565b60007f000000000000000000000000000000000000000000000000000000000000000090509392505050565b60007fbc402bb2677d2b6964de442da751aae940a25996aaa64c61898db96e4e1c96ee85858585604051808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390a17f00000000000000000000000000000000000000000000000000000000000000009050949350505050565b60007f89de0f97a1290529d8c10d8d833c79e1bdcba68d72ec7fc363638a760b0eb65385858585604051808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390a17f00000000000000000000000000000000000000000000000000000000000000009050949350505050565b60007fa7935ab82ea71ce49f4ffd6b40087cfc82fc60ae65f962fa0d88f9b31a6116538686868686604051808673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156105ef5780820151818401526020810190506105d4565b50505050905090810190601f16801561061c5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a17f000000000000000000000000000000000000000000000000000000000000000090509594505050505056fea2646970667358221220c8b46f3a041aa8e516e910d14bea33e56a73d5f80040e153430e6b543fa12ac564736f6c634300060c0033";

export class ExchangerMock__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _outputToAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ExchangerMock> {
    return super.deploy(
      _outputToAmount,
      overrides || {}
    ) as Promise<ExchangerMock>;
  }
  getDeployTransaction(
    _outputToAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_outputToAmount, overrides || {});
  }
  attach(address: string): ExchangerMock {
    return super.attach(address) as ExchangerMock;
  }
  connect(signer: Signer): ExchangerMock__factory {
    return super.connect(signer) as ExchangerMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExchangerMockInterface {
    return new utils.Interface(_abi) as ExchangerMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ExchangerMock {
    return new Contract(address, _abi, signerOrProvider) as ExchangerMock;
  }
}
