/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  AllConnectorsBSC,
  AllConnectorsBSCInterface,
} from "../AllConnectorsBSC";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldOwner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnerChanged",
    type: "event",
  },
  {
    inputs: [],
    name: "claimRewards",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "platform",
        type: "address",
      },
      {
        internalType: "address",
        name: "supplyToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "withdrawAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxRedeemAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "borrowToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "minRepayAmount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "exchangeData",
        type: "bytes",
      },
    ],
    name: "decreaseSimplePositionWithLoop",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getBorrowBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getCollateralUsageFactor",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getPositionMetadata",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "supplyAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "borrowAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "collateralUsageFactor",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "principalValue",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "positionValue",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "positionAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "platformAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "supplyTokenAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "borrowTokenAddress",
            type: "address",
          },
        ],
        internalType: "struct SimplePositionMetadata",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getPositionValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getPrincipalValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getSimplePositionDetails",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSupplyBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "platform",
        type: "address",
      },
      {
        internalType: "address",
        name: "supplyToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "principalAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minSupplyAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "borrowToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "totalBorrowAmount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "exchangeData",
        type: "bytes",
      },
    ],
    name: "increaseSimplePositionWithLoop",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "oldOwner",
        type: "address",
      },
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "accountId",
        type: "uint256",
      },
    ],
    name: "resetAccount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class AllConnectorsBSC__factory {
  static readonly abi = _abi;
  static createInterface(): AllConnectorsBSCInterface {
    return new utils.Interface(_abi) as AllConnectorsBSCInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AllConnectorsBSC {
    return new Contract(address, _abi, signerOrProvider) as AllConnectorsBSC;
  }
}
