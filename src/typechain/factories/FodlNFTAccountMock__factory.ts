/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  FodlNFTAccountMock,
  FodlNFTAccountMockInterface,
} from "../FodlNFTAccountMock";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldOwner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnerChanged",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nft",
        type: "address",
      },
      {
        internalType: "string",
        name: "newUri",
        type: "string",
      },
    ],
    name: "changeTokenUri",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "resetAccount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610293806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063c65b43051461003b578063c9aa10ca14610116575b600080fd5b6101146004803603604081101561005157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561008e57600080fd5b8201836020820111156100a057600080fd5b803590602001918460018302840111640100000000831117156100c257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610184565b005b6101826004803603606081101561012c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610258565b005b8173ffffffffffffffffffffffffffffffffffffffff16630675b7c6826040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156101f05780820151818401526020810190506101d5565b50505050905090810190601f16801561021d5780820380516001836020036101000a031916815260200191505b5092505050600060405180830381600087803b15801561023c57600080fd5b505af1158015610250573d6000803e3d6000fd5b505050505050565b50505056fea26469706673582212208e263eb3246ddc8a91f55468893d5a00e2b4fcf79d37b9dab9ec4a3e88045ee764736f6c634300060c0033";

export class FodlNFTAccountMock__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FodlNFTAccountMock> {
    return super.deploy(overrides || {}) as Promise<FodlNFTAccountMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): FodlNFTAccountMock {
    return super.attach(address) as FodlNFTAccountMock;
  }
  connect(signer: Signer): FodlNFTAccountMock__factory {
    return super.connect(signer) as FodlNFTAccountMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FodlNFTAccountMockInterface {
    return new utils.Interface(_abi) as FodlNFTAccountMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FodlNFTAccountMock {
    return new Contract(address, _abi, signerOrProvider) as FodlNFTAccountMock;
  }
}
